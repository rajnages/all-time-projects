name: 'Terraform'

on:
    workflow_dispatch:
      inputs:
        workspace:
          type: choice
          description: 'Terraform workspace to use (dev or prod)'
          options:
            - dev
            - prod
          required: true
          default: dev
        action:
          type: choice
          description: 'Action to perform (plan, apply, or destroy)'
          options:
            - plan
            - apply
            - destroy
          required: true
          default: 'plan'


env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

permissions:
  contents: read

jobs:

  CheckOut-Repo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

  Setting-Up-Terraform:
    runs-on: ubuntu-latest
    needs: CheckOut-Repo

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.9.3

  Terraform-Workflow:
    runs-on: ubuntu-latest
    needs: Setting-Up-Terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.9.3

      - name: Terraform Init
        working-directory: modules
        run: terraform init

      - name: Select or Create Workspace
        working-directory: modules
        run: |
          terraform workspace list | grep "${{ github.event.inputs.workspace }}" || terraform workspace new ${{ github.event.inputs.workspace }}
          terraform workspace select ${{ github.event.inputs.workspace }}

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        working-directory: modules
        run: terraform plan -var-file=./modules/environment/${{ github.event.inputs.workspace }}.tfvars -input=false

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: modules
        run: terraform apply -auto-approve -var-file=./modules/environment/${{ github.event.inputs.workspace }}.tfvars -input=false

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: modules
        run: terraform destroy -auto-approve -var-file=./modules/environment/${{ github.event.inputs.workspace }}.tfvars -input=false
